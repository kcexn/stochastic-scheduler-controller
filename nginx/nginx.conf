load_module modules/ngx_http_js_module.so;
user root;
worker_processes 1;
pid /run/nginx/nginx.pid;
events {
        worker_connections 32;
		use epoll;
}
http {
    js_import njs/log_headers.js;
    js_set $headers_json log_headers.json_headers;
    log_format controller escape=json '$remote_addr - $remote_user - [$time_local] '
                                 '"$request" $headers_json $status $body_bytes_sent '
                                 'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"';
    access_log off;
	# access_log /var/log/nginx-access.log controller;
    error_log /var/log/nginx-error.log;
    error_log /dev/stderr;
    upstream controller {
        server unix:/run/controller/controller.sock;
    }
    server {
        listen 0.0.0.0:8080;
        root /var/www/html;
        location /{
            index index.nginx-debian.html;
        }
        location /init {
            proxy_set_header Host "";
            proxy_set_header User-Agent "";
            proxy_set_header Content-Type "";
            proxy_set_header Accept "";
            proxy_pass http://controller;
            limit_except POST { deny all; }
            error_page 403 = @method_not_allowed;
            error_page 502 = @bad_gateway;
            error_page 503 = @temp_unavailable;
        }

        location /run {
			proxy_buffering off;
            proxy_set_header Host "";
            proxy_set_header User-Agent "";
            proxy_set_header Content-Type "";
            proxy_set_header Accept "";
            proxy_pass http://controller;
            limit_except POST { deny all; }
            error_page 403 = @method_not_allowed;
            error_page 502 = @bad_gateway;
            error_page 503 = @temp_unavailable;
        }

        location @method_not_allowed {
            return 405;
        }

        location @bad_gateway {
            default_type application/json;
            return 502 '{"error": "502 Bad Gateway"}';
        }

        location @temp_unavailable {
            default_type application/json;
            return 503 '{"error": "503 Service Temporarily Unavailable."}';
        }
    }
}
